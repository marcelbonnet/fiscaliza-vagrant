#!/bin/bash
# 2020-05-27

SHARE=${VAGRANT_DIR:=/vagrant}

function uso(){
	echo -e "\e[33mQuando eu precisar de arquivos, espero encontrá-los em \e[33;1m${SHARE}\e[33m."
	echo -e "Para alterar o caminho você pode rodar o script assim:"
	echo -e "VAGRANT_DIR=\"/vagrant_data_xpto/Meus Dados\" `basename $0`"
	echo -e "\e[0m"

	printf "\tOpções:\n"
	printf "\t%s --dir [diretório]\n" "`basename $0`"
	printf "\t\t Configura variável VAGRANT_DIR de modo permanente, se você quiser usar outro caminho para o script quando procurar por arquivos.\n"
	printf "\t%s --dblist\n" "`basename $0`"
	printf "\t\t Lista as bases de dados do postgres\n"
	printf "\t%s --drop [nome da base de dados] \n" "`basename $0`"
	printf "\t\t Remove uma base de dados do postgres\n"
	printf "\t%s --restore [nome da base de dados] [arquivo] \n" "`basename $0`"
	printf "\t\t Recupera um backup do Postgres. Se a base existir, será destruída primeiro. Se não existir, será criada.\n"
	printf "\t%s --dump [nome da base de dados] [arquivo] \n" "`basename $0`"
	printf "\t\t Gera um backup do Postgres para o arquivo.\n"
	printf "\t%s --redmine-set-db [nome da base de dados] [-f|-s|-f4|-s4|caminho] \n" "`basename $0`"
	printf "\t\t Configura qual banco de dados o Redmine usará.\n\t\t\t-f/-f4\tRedmine Fiscaliza/Fiscaliza 4.x\n\t\t\t-s/-s4\tRedmine Suporte/Suporte 4.x\n\t\t\tcaminho\tCaminho para o redmine\n"
	printf "\t%s --redmine-db \n" "`basename $0`"
	printf "\t\t Exibe o db em uso pelos Redmine instalados\n"
	printf "\t%s --osm-uf \n" "`basename $0`"
	printf "\t\t Reinstala a base de dados do OSM para outra UF. No momento, refaz apenas para MT.\n"
	exit 1
}

function _dir(){
	shift
	[[ $# -eq 0 ]] && uso;
	grep VAGRANT_DIR .bashrc > /dev/null
	if [ $? -eq 0 ]; then
		sed -i'.orig' -e "s,VAGRANT_DIR=.*,VAGRANT_DIR=$1," /root/.bashrc
		rm /root/.bashrc.orig
	else
		echo "export VAGRANT_DIR=\"$1\"" >> /root/.bashrc
	fi
	echo -e "Agora rode o comando \e[37;1msource /root/.bashrc\e[0m para ter efeito."
}

function _drop(){
	shift
	[[ $# -eq 0 ]] && uso;
	psql -U postgres -c "DROP DATABASE IF EXISTS $1"
}

function _restore(){
	shift
	[[ $# -lt 2 ]] && uso;
	systemctl restart postgresql-12
	psql -U postgres -c "DROP DATABASE IF EXISTS $1"
	psql -U postgres -c "CREATE DATABASE $1 OWNER=redmine"
	pg_restore -U postgres -d $1 -O -x ${SHARE}/$2
	# se estiver fazendo restore da base de dados do Fiscaliza:
	rails runner "u=User.find_by([\"login like ?\", 'UISoCboc%']); unless u.nil?; u.admin = true; u.login='admin'; u.auth_source = nil; u.salt_password('12345678'); u.save; puts 'Usuário admin 12345678 restaurado.'; end"
}

function _dump(){
	shift
	[[ $# -lt 2 ]] && uso;
	pg_dump -U postgres -Fc -d $1 -f ${SHARE}/$2
}

function _redmine_set_db(){
	shift
	[[ $# -lt 2 ]] && uso;
	
	[[ $2 == "-f" ]] && caminho=/opt/redmine323fiscaliza/
	[[ $2 == "-s" ]] && caminho=/opt/redmine323suporte/
	[[ $2 == "-f4" ]] && caminho=/opt/redmine411fiscaliza/
	[[ $2 == "-s4" ]] && caminho=/opt/redmine411suporte/
	[[ ${#2} -gt 2 ]] && caminho="$2"

	sed -i'.orig' -e 's,  database,  #database,' -e "3i\ \ database: $1" ${caminho}/config/database.yml
}

function _redmine_db(){
	grep "^  database:" /opt/redmine*/config/database.yml | awk '{print "\033[35;1m"$1"\033[36m\t"$3"\033[0m"}'
}

function _osmosis(){
	local uf="MT"

	echo "Depois do download terminar, a carga do Tiles e do Nominatim pode levar de 30 a 60 minutos"
	echo "A geração dos caches de imagens talvez umas 3 horas"

	# Para fazer a carga dos Tiles para o Centro Oeste:
	wget -O regiao_${uf}.osm.pbf https://download.geofabrik.de/south-america/brazil/centro-oeste-latest.osm.pbf
	# Para pegar apenas uma UF, fazer como na região sul, em que extraí apenas um retângulo que compreende o Paraná:
	# ~/osmosis/bin/osmosis --rb sul-latest.osm.pbf --bounding-box -55 -47 -22 -27 --wb PR.pbf
	# ~/osmosis/bin/osmosis --rb sul-latest.osm.pbf --bounding-box left=-55 right=-47 top=-22 bottom=-27 --wb PR.pbf
	# ~/osmosis/bin/osmosis --rb sul-latest.osm.pbf --bounding-box left=-55 right=-47 top=-22 bottom=-27 zoom=18 --wb PRzoom18.pbf

	# MT:
	~/osmosis/bin/osmosis --rb regiao_${uf}.osm.pbf --bounding-box left=-62 right=-50 top=-7 bottom=-18 zoom=18 --wb /opt/osm-arq/pbf/${uf}.pbf

	# Detonar e recriar a base de dados de Tiles e fazer carga:

	dropdb -U postgres osm_tiles
	createdb -U postgres -E UTF8 -O osm osm_tiles
	psql -U postgres -c "CREATE EXTENSION hstore;" -d osm_tiles
	psql -U postgres -c "CREATE EXTENSION postgis;" -d osm_tiles
	time /usr/local/bin/osm2pgsql -U osm --slim -d osm_tiles -C 1024  --hstore -S /var/www/openstreetmap-carto-4.25.0/openstreetmap-carto.style /opt/osm-arq/pbf/${uf}.pbf


	# Refazer o Nominatim

	time /srv/nominatim/build/utils/setup.php --osm-file /opt/osm-arq/pbf/${uf}.pbf --osm2pgsql-cache 1024  --all 2>&1 | tee setup.log

	# Graph hopper:
	sed -i'.orig' -e "s,PR\.pbf,${uf}\.pbf," /srv/graphhopper/config.yml

	# Gerar o cache de imagens:
	rm -rf /var/lib/mod_tile/default/*
	echo "========================================================"
	echo "Por padrão o cache será até zoom 10, pra demorar menos. Para gerar de zoom 11 a 18, por exemplo, rode na mão, mais tarde:"
	echo "/usr/local/bin/render_list -m default -a -z 11 -Z 18"
	echo "========================================================"

	time /usr/local/bin/render_list -m default -a -z 0 -Z 10
}

[[ ! "${1#-}" ]] && uso && exit 1
while test "${1#-}" != "$1"
do
	case "$1" in
	--dblist) psql -U postgres -c "\l" ; shift ;;
	--drop) _drop $@ ; shift ;;
	--restore) _restore $@ ; shift ;;
	--dir) _dir $@ ; shift ;;
	--dump) _dump $@ ; shift ;;
	--redmine-set-db) _redmine_set_db $@ ; shift; break ;;
	--redmine-db) _redmine_db $@ ;;
	--osm-uf) _osmosis $@ ; shift ;;
	-*) uso ;;
	*) break ;;
	esac
	shift
done
