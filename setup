#!/bin/bash --login
# UPDATE 2021-03-15 : preciso do login shell para usar o RVM
# 2020-05-27

echo -n "Atualizando utilitários..."
curl -s -O -L https://github.com/marcelbonnet/fiscaliza-vagrant/archive/master.zip
rm -rf fiscaliza-vagrant-master
unzip master.zip && rm master.zip
[[ $? -ne 0 ]] && echo "Houve erro. Tente mais tarde." && exit
[[ -e /root/bin ]] || mkdir /root/bin
[[ ! -e bin/ajuda ]] && ln -s /root/fiscaliza-vagrant-master/ajuda bin/ajuda
cp /root/fiscaliza-vagrant-master/motd /etc/motd


# #############################################################################
#  PATCH REDMINE DE SUPORTE
# #############################################################################
if [ ! -e /root/.patch_suporte_ok ]; then 
cat <<EOF > /etc/httpd/conf.d/redmine323
# Este arquivo deve ser importado por 0.conf
     Alias "/fiscaliza323" "/opt/redmine323fiscaliza/public"
     <LocationMatch "^/fiscaliza323/(?!suporte).*">
          PassengerRuby /usr/local/rvm/wrappers/ruby-2.2.2/ruby
          PassengerBaseURI /fiscaliza323
          PassengerAppRoot /opt/redmine323fiscaliza
          PassengerUser apache
          RailsEnv development
     </LocationMatch>
     <Directory "/opt/redmine323fiscaliza/public">
         Allow from all
         Options -MultiViews
         Require all granted
     </Directory>

      Alias "/fiscaliza323/suporte" "/opt/redmine323suporte/public"
      <LocationMatch "^/fiscaliza323/suporte">
          PassengerRuby /usr/local/rvm/wrappers/ruby-2.2.2/ruby
          PassengerBaseURI /fiscaliza323/suporte
          PassengerAppRoot /opt/redmine323suporte
          PassengerUser apache
          RailsEnv development
     </LocationMatch>
     <Directory "/opt/redmine323suporte/public">
         Allow from all
         Options -MultiViews
         Require all granted
     </Directory>
EOF
cp /opt/redmine323fiscaliza/Gemfile /opt/redmine323suporte/Gemfile
> /root/.patch_suporte_ok
fi

if [ ! -e /root/.patch_suporte_db_ok ]; then 
	sed -e "s,database:.*,#database: nome_da_base," /opt/redmine323fiscaliza/config/database.yml > /opt/redmine323suporte/config/database.yml
	> /root/.patch_suporte_db_ok
	echo "-- Aplicado patch do Suporte (database). Configure sua base de dados agora."
fi

if [ ! -e /root/.patch_suporte_db2_ok ]; then 
	echo "  database: redmine323suporte" >> /opt/redmine323suporte/config/database.yml
	> /root/.patch_suporte_db2_ok
	cp -v /opt/redmine323fiscaliza/config/additional_environment.rb /opt/redmine323suporte/config/additional_environment.rb
	echo "-- Aplicado patch #2 do Suporte. Adicionei o database padrão. "
	echo "-- Configurei os logs do ambiente de suporte."
fi


# ############ Phusion Passenger, não temos o pacote de suporte nativo
if [ ! -e /root/.patch_passenger_native_support_ok ]; then 
  sed -i '9i    SetEnv PASSENGER_DOWNLOAD_NATIVE_SUPPORT_BINARY 0' /etc/httpd/conf.d/redmine323
  sed -i '23i    SetEnv PASSENGER_DOWNLOAD_NATIVE_SUPPORT_BINARY 0' /etc/httpd/conf.d/redmine323
  > /root/.patch_passenger_native_support_ok
  echo "-- Aplicado em config do Redmine no Apache."
  echo "-- Reiniciar as instâncias do Redmine deve ficar bem mais rápido."
fi

# ########################
# GIT E AUTO TOOLS
# ########################
if [ ! -e /root/.patch_autotools_ok ]; then 
rvm install ruby-2.7.0
rvm use 2.7.0
[[ $? -ne 0 ]] && echo "-- Erro em autotools. Abortando provisionamento" && exit 1
gem install git -v 1.7.0
gem install gitlab -v 4.16.1
gem install colorize -v 0.8.1
gem install rubyzip -v 2.0.0

cat << "EOF" > /root/.gitconfig
[alias]
   clones = clone -c http.sslVerify=false
   https = "!git config http.sslVerify false"

   ls = log --pretty=format:"%C(bold)%C(magenta)%h\\ %C(yellow)%as%Cred%d\\ %Creset%s%Cgreen\\ [%cn]" 
   ll = log --pretty=format:"%C(bold)%C(magenta)%h\\ %C(yellow)%as%Cred%d\\ %Creset%s%Cgreen\\ [%cn]" --name-only


   blt = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'

   new = "!f() { git checkout -b "$1"; }; f"
   bm = "!f() { git pull --stat origin "$1"; }; f"
   rmt = "!f() { git tag -d "$1" && git push origin --delete "$1"; }; f"
   dry = "!f() { git merge --no-commit --no-ff "$1"; }; f"
   branches = branch -a

   # diff last commit
   dlc = diff --cached HEAD^
   # Show the history of a file, with diffs
   filelog = log -u
   fl = log -u

   # Show content (full diff) of a commit given a revision:
   dr  = "!f() { git diff "$1"^.."$1"; }; f"
   diffr  = "!f() { git diff "$1"^.."$1"; }; f"
   diffdel= log --no-renames --diff-filter=D --summary


   # list aliases
   la = "!git config -l | grep alias | cut -c 7-"

   # mostra ultima tag
   lt = describe --tags --abbrev=0


   # funcao strftime existe no gawk 
   tags2 = !"git for-each-ref \
        --sort=taggerdate "
   tagsd = !"git for-each-ref \
        --sort=taggerdate \
        --format '%(tag)_,,,_%(taggerdate:raw)_,,,_%(taggername)_,,,_%(subject)' refs/tags \
        | gawk 'BEGIN { FS = \"_,,,_\"  } ; { t=strftime(\"%Y-%m-%d  %H:%M\",$2); printf \"%-20s %-18s %-25s %s\\n\", t, $1, $4, $3  }'"
   tags = tag --column
   versoes = tag --list '[0-9].[0-9].[0-9]'




[user]
	name = Seu Nome No /root/.gitconfig
	email = seu_email@anatel.gov.br

[credential "https://git.anatel.gov.br"]
	username = seu_login
	helper = cache --timeout 36000

[http "https://git.anatel.gov.br"]
	sslVerify = false
[core]
	autocrlf = input
EOF
   # o repo.rb vai precisar disso apesar da config por domínio:
   git config --global http.sslVerify "false"
   > /root/.patch_autotools_ok
   echo "-- ============================ Atenção ==========================="
   echo "-- ======================= Instalação Manual ======================="
   echo "-- Configuração para uso do script administrativo do git:"
   echo "-- Edite name, email e username em /root/.gitconfig"
   echo "-- Rode o comando a seguir para baixar o script administrativo:"
   echo "   git clones https://git.anatel.gov.br/suporte-fi/auto-tools.git"
fi

if [ ! -e /root/.patch_autotools2_ok ]; then 
  rvm use 2.7.0
  # entrada da chave de api
  echo "export GITLAB_API_PRIVATE_TOKEN=" >> /root/.bashrc

  cat << "EOF" > /root/bin/repo
#!/usr/bin/bash --login
# 2021-03-15
# marcelbonnet
# Carrega o script administrativo do repositório com o RVM

grep GITLAB_API_PRIVATE_TOKEN /root/.bashrc > /dev/null
if [ $? -ne 0 ]; then
  echo "Opa!"
  echo "Não achei a variável GITLAB_API_PRIVATE_TOKEN em /root/.bashrc"
  exit 1
fi

k=$(grep GITLAB_API_PRIVATE_TOKEN /root/.bashrc | cut -d '=' -f2)
if [ "$k" == "" ]; then
  echo "Opa!"
  echo "Você não adicionou sua Chave de API do Git Lab Corporativo na variável GITLAB_API_PRIVATE_TOKEN em /root/.bashrc"
  exit 1
fi

if [ ! -e /root/auto-tools/repo.rb ]; then
   echo "==> ERRO: não achei o script administrativo"
   echo "Você deve rodar: git clones https://git.anatel.gov.br/suporte-fi/auto-tools.git"
   exit 1
fi

rvm use 2.7.0
ruby /root/auto-tools/repo.rb $@
EOF
  chmod +x /root/bin/repo
  
  echo "-- ============================ Atenção ==========================="
  echo "-- Para usar o script administrativo do repositório git"
  echo "-- você deve criar uma chave de API no gitlab corporativo."
  echo "-- Crie a chave com todas as permissões e não a revele para ninguém."
  echo "-- Abra o arquivo /root/.bashrc e adicione sua chave na "
  echo "-- variável GITLAB_API_PRIVATE_TOKEN="
  echo "-- Salve o arquivo .bashrc, faça logoff e login novamente."
  
  > /root/.patch_autotools2_ok
fi

if [ ! -e /root/.patch_bashrc1_ok ]; then 
  echo "alias rp='systemctl restart postgresql-12'" >> /root/.bashrc
  > /root/.patch_bashrc1_ok
fi





if [ ! -e /root/.patch_autotools3_ok ]; then 
  # resolve o bug do travamento durante o clone
  rvm use 2.7.0
  gem install git -v 1.8.1
  gem uninstall git -v 1.7.0
  > /root/.patch_autotools3_ok
fi

# Instalação do Redmine 4.2.1
if [ ! -e /root/.patch_redmine421_ok ]; then   
  # RAILS_ENV= 	está configurado no ~/.bashrc
  # test $RAILS_ENV || echo "export RAILS_ENV=production"  >> /root/.bashrc && . /root/.bashrc
  
  # ################################################
  # 	Install Ruby e Redmine
  #   https://www.redmine.org/projects/redmine/wiki/RedmineInstall
  # ################################################
  echo "-- instalando ruby e redmine"
  ruby_version=2.7.2
  rvm install ${ruby_version}
  rvm use ${ruby_version}
  versao=4.2.1
  nome=fiscaliza
  test -f ~/${versao}.zip || (cd ~ && curl -O -L https://github.com/redmine/redmine/archive/${versao}.zip)
  unzip -q -d  /opt/ ~/${versao}.zip 
  mv -v /opt/redmine-${versao} /opt/redmine${versao//\./}${nome}
  cd /opt/redmine${versao//\./}${nome}
  
  mkdir -vp tmp tmp/pdf public/plugin_assets
  chown -R apache:apache files log tmp public/plugin_assets
  chmod -R 755 files log tmp public/plugin_assets
  
  # ################################################
  # 	VERIFICAR OS AJUSTES MANUAIS
  # ################################################
  echo "-- criando a base de dados para Redmine #{versao}"
  psql -U postgres -c "CREATE DATABASE redmine${versao//\./} WITH ENCODING='UTF8' OWNER=redmine;"
  # psql -U postgres -c -c "CREATE EXTENSION postgis;" -d redmine${versao//\./}

  cat <<EOF > config/database.yml
default: &default
  host: localhost
  username: redmine
  password: 12345678
  encoding: utf8

development:
  <<: *default
  adapter: postgis
  #adapter: postgresql
  # database zerado do Redmine com usuário admin e senha 12345678
  database: redmine${versao//\./}

EOF

  cat <<EOF > /opt/redmine${versao//\./}${nome}/config/additional_environment.rb
config.logger = Logger.new(Rails.root.join("log",Rails.env + ".log"), 'daily' )
config.logger.formatter = proc do |severity, datetime, progname, msg| "#{msg}\n"
end
config.log_level = :info
#config.log_level = :debug
#config.log_level = :error
EOF
  
  rm -vrf plugins
  
    
  # No servidor corporativo:
  # config/configuration.yml
  # the files directory content into your new installation 
  # plugins directory
  # public/themes (somente os instalados por plugin ou manualmente!)
  # COPIAR OS ARQUIVOS DE LOG
  # configurar o database.yml com adapter: postgis
  
  # ################################################
  # Configuração
  # ################################################
  
# printf "gem 'pg', '~> 1.1.4'\ngem 'activerecord-postgis-adapter'" > Gemfile.local
  printf "gem 'pg', '~> 1.2.3'\ngem 'activerecord-postgis-adapter'" > Gemfile.local
  
  # configurar o pry e o ambiente devel na VM
  echo "-- configurando o pry no Redmine"
  printf "\ngem \"pry-rails\"\n" >> /opt/redmine${versao//\./}${nome}/Gemfile.local
  
  echo "-- instalando pg adapter"
  # gem install -N pg -v 1.1.4 -- --with-pg-config=/usr/pgsql-12/bin/pg_config
  gem install -N pg -v '~> 1.2.3' -- --with-pg-config=/usr/pgsql-12/bin/pg_config
  echo "-- instalando postgis adapter"
  gem install -N activerecord-postgis-adapter
  echo "-- install gem active record..."
  gem install -N activerecord-compatible_legacy_migration
  
  # estou usando bundler 1.17.3 que já estava instalado (por quem? rvm?)
  # VM tem ImageMagick . Caso contrário, bundle seria com --without ... rmagick
  # ImageMagick.x86_64                    6.7.8.9-18.el7             @base          
  # ImageMagick-devel.x86_64              6.7.8.9-18.el7             @base
  echo "-- bundle install"
  bundle install --without development test
  
  echo "-- rake secret token"
  bundle exec rake generate_secret_token

  echo "-- db:migrate"
  bundle exec rake db:migrate

  echo "-- apagando logs"
  rm -vrf log/*


  # echo "-- fazendo um link simbólico'para plugins" # vai ficar zerada essa instalação
  # ln -sv /vagrant/redmine-fiscaliza-4x plugins

  # APACHE CONF
  echo "-- configurando site no apache"
  cat <<EOF > /etc/httpd/conf.d/redmine${versao//\./}
  # Este arquivo deve ser importado por 0.conf
       Alias "/fiscaliza${versao//\./}" "/opt/redmine421fiscaliza/public"
       <LocationMatch "^/${nome}${versao//\./}/(?!suporte).*">
            PassengerRuby /usr/local/rvm/wrappers/ruby-${ruby_version}/ruby
            PassengerBaseURI /${nome}${versao//\./}
            PassengerAppRoot /opt/redmine${versao//\./}${nome}
            PassengerUser apache
            RailsEnv development
  SetEnv PASSENGER_DOWNLOAD_NATIVE_SUPPORT_BINARY 0
       </LocationMatch>
       <Directory "/opt/redmine${versao//\./}${nome}/public">
           Allow from all
           Options -MultiViews
           Require all granted
       </Directory>
EOF

  echo "-- Reiniciando Apache..."
  systemctl restart httpd
  
  echo "-- Redmine ${versao} instalado. Ele ainda não é o padrão. Ele requer o ruby ${ruby_version}:"
  echo "-- rvm use ${ruby_version}"

  > /root/.patch_redmine421_ok
fi

if [ ! -e /root/.patch_gitconfig1_ok ]; then 
  
  cat << "EOF" > /tmp/novo
[alias]
   repos-trocar = "! recur_cmd() { for repo in `find . -name .git -type d -prune -printf '%h '`; do (cd $repo && printf \"\\e[40;33;1m${repo} \\e[0m\\e[40;33m\"$@\"\\e[0m \" && eval \"git checkout $1\" ); done }; recur_cmd "
   repos-cmd = "! recur_cmd() { for repo in `find . -name .git -type d -prune -printf '%h '`; do (cd $repo && printf \"\\e[40;33;1m${repo} \\e[0m\\e[40;33m\"$@\"\\e[0m \" && eval \"git $@\" ); done }; recur_cmd "
   repos-pull = "! git repos-cmd pull origin $1"
   repos-st = "! git repos-cmd status $1"
   repos-diff = "! git repos-cmd diff $1"
   repos-log = "! git repos-cmd ls $1"
EOF
  cat /tmp/novo ~/.gitconfig  > ~/.gitconfig.novo
  mv ~/.gitconfig.novo ~/.gitconfig
  > /root/.patch_gitconfig1_ok
fi

if [ ! -e /root/.patch_pry_debug_ok ]; then
cat << EOF >> /opt/redmine421fiscaliza/Gemfile.local
group :development do
  gem "pry-byebug"
end
EOF

cd /opt/redmine421fiscaliza
rvm use 2.7.2
bundle install --with development

cat << EOF > /opt/redmine421fiscaliza/fiscaliza.ru
# rails server
require ::File.expand_path('../config/environment',  __FILE__)
map ENV['RAILS_RELATIVE_URL_ROOT'] || '/' do
  #run RedmineApp::Application
  run Rails.application
end
EOF

cat << EOF >> /root/.bashrc
# debug com o rails server:
# comentar a linha de código com o comando binding.pry na linha onde o debug deve iniciar
# Desligue o Apache com "systemctl stop httpd" e inicie o servidor do rails com o comando "s"
alias s='cd /opt/redmine421fiscaliza && RAILS_RELATIVE_URL_ROOT=/fiscaliza421 rails s -p 80 -b 0.0.0.0 -c fiscaliza.ru'
EOF

cat << EOF > /etc/motd
  ____           _    ___  ____    _____
 / ___|___ _ __ | |_ / _ \/ ___|  |___  |
| |   / _ \ '_ \| __| | | \___ \     / /
| |__|  __/ | | | |_| |_| |___) |   / /
 \____\___|_| |_|\__|\___/|____/   /_/
_______________________________________________
- WEB
   Redmine
      * http://localhost:10080/fiscaliza323
      * login=admin, senha=12345678
- Open Street Maps
   Tiles
      * http://localhost:10080/renderd/exemplo.html
   Nominatim
      * http://localhost:10080/nominatim/
   Graph Hopper (Rotas)
      * http://localhost:10080/openstreetmap/rotas/route?point=-25.429596%2C-49.271272&point=-23.311288%2C-51.159502&type=json&locale=pt-BR&key=&elevation=false&profile=car&points_encoded=false

- Redmine instalado em /opt
- Utilitários: use o comando 'ajuda'
- Veja o arquivo ~/.bashrc para outras utilidades
_______________________________________________
EOF
> /root/.patch_pry_debug_ok
fi


# ############################
# RODAR NO FINAL DO SCRIPT
# ############################
# esses arquivos não devem ser removidos sobre pena de rodar a atualização novamente, sobrescrevendo modificações do usuário da VM
chattr +i /root/.patch_*
